var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var values = require('object.values');
var entries = require('object.entries');
var falafel = require('falafel');

var isPropertyAccess = function isPropertyAccess(node) {
  var index = node.parent.source().indexOf('.' + node.name);
  if (index === -1) {
    return false;
  }
  var proxyString = '__idyllStateProxy';
  if (index >= proxyString.length) {
    if (node.parent.source().substr(index - proxyString.length, proxyString.length) === proxyString) {
      return false;
    }
  }
  return true;
};

export var buildExpression = function buildExpression(acc, expr, isEventHandler) {
  var identifiers = [];
  var modifiedExpression = '';

  try {
    modifiedExpression = falafel(isEventHandler ? expr : 'var __idyllReturnValue = ' + (expr || 'undefined'), function (node) {
      switch (node.type) {
        case 'Identifier':
          var propertyAcess = isPropertyAccess(node);
          if (!propertyAcess && Object.keys(acc).indexOf(node.name) > -1) {
            identifiers.push(node.name);
            node.update('__idyllStateProxy.' + node.source());
          }
          break;
      }
    });
  } catch (e) {
    console.error(e);
  }

  if (!isEventHandler) {
    return '\n    ((context) => {\n      var __idyllStateProxy = new Proxy({}, {\n        get: (_, prop) => {\n          return context[prop];\n        },\n        set: (_, prop, value) => {\n          console.warn(\'Warning, trying to set a value in a property expression.\');\n        }\n      });\n      ' + modifiedExpression + ';\n      return __idyllReturnValue;\n    })(this)';
  }

  return '\n    ((context) => {\n        var __idyllExpressionExecuted = false;\n        var __idyllStateProxy = new Proxy({\n          ' + identifiers.map(function (key) {
    return key + ': ' + (key !== 'refs' ? 'context.__idyllCopy(context[\'' + key + '\'])' : 'context[\'' + key + '\']');
  }).join(', ') + '\n        }, {\n          get: (target, prop) => {\n            return target[prop];\n          },\n          set: (target, prop, value) => {\n            if (__idyllExpressionExecuted) {\n              var newState = {};\n              newState[prop] = value;\n              context.__idyllUpdate(newState);\n            }\n            target[prop] = value;\n            return true;\n          }\n        });\n        ' + modifiedExpression + ';\n        context.__idyllUpdate({\n          ' + identifiers.filter(function (key) {
    return key !== 'refs';
  }).map(function (key) {
    return key + ': __idyllStateProxy[\'' + key + '\']';
  }).join(', ') + '\n        });\n        __idyllExpressionExecuted = true;\n    })(this)\n  ';
};

export var evalExpression = function evalExpression(acc, expr, key, context) {
  var isEventHandler = key && (key.match(/^on[A-Z].*/) || key.match(/^handle[A-Z].*/));
  var e = buildExpression(acc, expr, isEventHandler);
  if (isEventHandler) {
    return function () {
      eval(e);
    }.bind(Object.assign({}, acc, context || {}, {
      __idyllCopy: function copy(o) {
        if ((typeof o === 'undefined' ? 'undefined' : _typeof(o)) !== 'object') return o;
        var output, v, key;
        output = Array.isArray(o) ? [] : {};
        for (key in o) {
          v = o[key];
          output[key] = (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' ? copy(v) : v;
        }
        return output;
      }
    }));
  }

  try {
    return function (evalString) {
      try {
        return eval('(' + evalString + ')');
      } catch (err) {
        console.warn('Error occurred in Idyll expression');
        console.error(err);
      }
    }.call(Object.assign({}, acc), e);
  } catch (err) {}
};

export var getVars = function getVars(arr) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var formatAccumulatedValues = function formatAccumulatedValues(acc) {
    var ret = {};
    Object.keys(acc).forEach(function (key) {
      var accVal = acc[key];
      if (typeof accVal.update !== 'undefined' && typeof accVal.value !== 'undefined') {
        ret[key] = accVal.value;
      } else {
        ret[key] = accVal;
      }
    });
    return ret;
  };

  var pluck = function pluck(acc, val) {
    var variableType = val[0],
        _val$ = val[1],
        attrs = _val$ === undefined ? [] : _val$;
    var nameArr = attrs[0],
        valueArr = attrs[1];

    if (!nameArr || !valueArr) return acc;

    var _nameArr$ = nameArr[1],
        nameValue = _nameArr$[1];
    var _valueArr$ = valueArr[1],
        valueType = _valueArr$[0],
        valueValue = _valueArr$[1];


    switch (valueType) {
      case 'value':
        acc[nameValue] = valueValue;
        break;
      case 'variable':
        if (context.hasOwnProperty(valueValue)) {
          acc[nameValue] = context[valueValue];
        } else {
          acc[nameValue] = evalExpression(context, expr);
        }
        break;
      case 'expression':
        var expr = valueValue;
        if (variableType === 'var') {
          acc[nameValue] = evalExpression(Object.assign({}, context, formatAccumulatedValues(acc)), expr);
        } else {
          acc[nameValue] = {
            value: evalExpression(Object.assign({}, context, formatAccumulatedValues(acc)), expr),
            update: function update(newState, oldState) {
              var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

              return evalExpression(Object.assign({}, oldState, newState, context), expr);
            }
          };
        }
    }

    return acc;
  };

  return arr.reduce(pluck, {});
};

var filterIdyllProps = function filterIdyllProps(props, filterInjected) {
  var __vars__ = props.__vars__,
      __expr__ = props.__expr__,
      hasHook = props.hasHook,
      initialState = props.initialState,
      isHTMLNode = props.isHTMLNode,
      refName = props.refName,
      onEnterViewFully = props.onEnterViewFully,
      onEnterView = props.onEnterView,
      onExitViewFully = props.onExitViewFully,
      onExitView = props.onExitView,
      rest = _objectWithoutProperties(props, ['__vars__', '__expr__', 'hasHook', 'initialState', 'isHTMLNode', 'refName', 'onEnterViewFully', 'onEnterView', 'onExitViewFully', 'onExitView']);

  if (filterInjected) {
    var idyll = rest.idyll,
        hasError = rest.hasError,
        updateProps = rest.updateProps,
        ret = _objectWithoutProperties(rest, ['idyll', 'hasError', 'updateProps']);

    return ret;
  }
  return rest;
};

export { filterIdyllProps };
export var getData = function getData(arr) {
  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var pluck = function pluck(acc, val) {
    var attrs = val[1];
    var nameArr = attrs[0];
    var _nameArr$2 = nameArr[1],
        nameValue = _nameArr$2[1];


    acc[nameValue] = datasets[nameValue];

    return acc;
  };

  return arr.reduce(pluck, {});
};

export var splitAST = function splitAST(ast) {
  var state = {
    vars: [],
    derived: [],
    data: [],
    elements: []
  };

  var handleNode = function handleNode(storeElements) {
    return function (node) {
      var name = node[0],
          props = node[1],
          children = node[2];

      if (name === 'var') {
        state.vars.push(node);
      } else if (state[name]) {
        state[name].push(node);
      } else if (storeElements) {
        state.elements.push(node);
      }
      if (!children || typeof children === 'string') {
        return;
      }
      children.forEach(handleNode(false));
    };
  };

  ast.forEach(handleNode(true));
  return state;
};

export var hooks = ['onEnterView', 'onEnterViewFully', 'onExitView', 'onExitViewFully'];

export var scrollMonitorEvents = {
  onEnterView: 'enterViewport',
  onEnterViewFully: 'fullyEnterViewport',
  onExitView: 'partiallyExitViewport',
  onExitViewFully: 'exitViewport'
};

export var translate = function translate(arr) {
  var attrConvert = function attrConvert(list) {
    return list.reduce(function (acc, _ref) {
      var name = _ref[0],
          _ref$ = _ref[1],
          type = _ref$[0],
          val = _ref$[1];

      if (type === 'variable') {
        acc.__vars__ = acc.__vars__ || {};
        acc.__vars__[name] = val;
      }
      // each node keeps a list of props that are expressions
      if (type === 'expression') {
        acc.__expr__ = acc.__expr__ || {};
        acc.__expr__[name] = val;
      }
      // flag nodes that define a hook function
      if (hooks.includes(name)) {
        acc.hasHook = true;
      }

      acc[name] = val;
      return acc;
    }, {});
  };

  var tNode = function tNode(node) {
    if (typeof node === 'string') return node;

    if (node.length === 3) {
      var name = node[0],
          attrs = node[1],
          children = node[2];


      return _extends({
        component: name
      }, attrConvert(attrs), {
        children: children.map(tNode)
      });
    }
  };

  return splitAST(arr).elements.map(tNode);
};

export var mapTree = function mapTree(tree, mapFn) {
  var filterFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
    return true;
  };

  var walkFn = function walkFn(acc, node) {
    if (typeof node !== 'string') {
      if (node.children) {
        // translated schema
        node.children = node.children.reduce(walkFn, []);
      } else {
        // compiler AST
        node[2] = node[2].reduce(walkFn, []);
      }
    }

    if (filterFn(node)) acc.push(mapFn(node));
    return acc;
  };

  return tree.reduce(walkFn, []);
};

export var filterASTForDocument = function filterASTForDocument(ast) {
  return mapTree(ast, function (n) {
    return n;
  }, function (_ref2) {
    var name = _ref2[0];
    return name !== 'meta';
  });
};

var findWrapTargets = function findWrapTargets(schema, state) {
  var targets = [];
  var stateKeys = Object.keys(state);

  // always return node so we can walk the whole tree
  // but collect and ultimately return just the nodes
  // we are interested in wrapping
  mapTree(schema, function (node) {
    if (typeof node === 'string') return node;

    if (node.hasHook) {
      targets.push(node);
      return node;
    }

    // wrap all custom components
    var startsWith = node.component.charAt(0);
    if (startsWith === startsWith.toUpperCase()) {
      targets.push(node);
      return node;
    }

    // pull off the props we don't need to check

    var component = node.component,
        children = node.children,
        __vars__ = node.__vars__,
        __expr__ = node.__expr__,
        props = _objectWithoutProperties(node, ['component', 'children', '__vars__', '__expr__']);

    var expressions = Object.keys(__expr__ || {});
    var variables = Object.keys(__vars__ || {});

    // iterate over the node's prop values
    entries(props).forEach(function (_ref3) {
      var key = _ref3[0],
          val = _ref3[1];

      // avoid checking more props if we know it's a match
      if (targets.includes(node)) return;

      // Include nodes that reference a variable or expression.
      if (variables.includes(key) || expressions.includes(key)) {
        targets.push(node);
      }
    });

    return node;
  });

  return targets;
};
export { findWrapTargets };